Olympics
Implement a system that tracks the olympic medals of different nationalities. You can enter different countries to the system, and maintain the medal counts for them. The system should support arbitrarily large number of different nations. The database will consist of names of the nations (strings), and integers that represent gold-, silver- and bronze medals for each nation. For the name of the nation at least 20 characters should be supported, but you can decide how to handle longer names.

The program has the following functions:

A nation: Add nation: Add "nation" to the database. Initially each nation has no medals. For example: A Finland (1 p).

M nation gold silver bronze : Update medals: Adds the given amount of medals to the given country. For example M Finland 0 1 1 will add one silver and one bronze medal to Finland, in addition to existing medals. If the nation was not yet added using the A - command, an error message will be given. The medal counts are signed integers, and because of possible doping cases also negative adjustments need to be allowed, which means that the total count of the particular medal will be reduced. (1 p)

L : Output medal table: Prints the current medal table, i.e. all nations in the memory along with their medal counts: first gold, then silver, and finally bronze, each nation on a separate line. The nations should be listed in order such as first the nation with most gold medals will be output. In cases where there are equal number of gold medals, the number of silver medals counts. If also the silver counts are equal, the number of bronze medals counts. This command is worth of two points such that if you output all nations and medal counts correctly, but in wrong order, you will get one point. If, in addition, also the order is correct, you will get a second point. (max. 2 p)

W filename : Save table: Writes the medal table to a file with given filename. (1 p)

O filename : Load table: Loads the medal table from file, and replaces the existing table in memory. (1 p)

Q : Exit program: Exits program and releases all allocated memory. This operation must be implemented so that you can find all possible memory leaks.

In addition to the above commands, there should be a working main function that repeatedly asks commands from user and acts accordingly.

The commands start with one captial letter and may be followed by some number of parameters, separated by space, depending on the command. Below is an example of possible input sequence:

A China
A Finland
M China 2 1 1
M Finland 0 0 1
M China 1 3 1
M China -1 0 0
L
W medals
Q
After this, China has 2 gold medals, 4 silver, and 2 bronze, but Finland has only one bronze. When the table is printed, China should be shown before Finland. The table will be written to file "medals".

You can design your program in any way you want, but apply clear structure to logical functions, and name the functions and variables appropriately so that the program is easy to read. Implement the program in single .c file. You can also use one header file for your definitions, but you can include them also in the .c file and omit the header file.

You must use dynamic memory to implement the storage. A large static array is not acceptable. The dynamic memory allocation should be done based on the actual need: malloc(1000000) is not acceptable.

Evaluation criteria
Each functionality that is implemented correctly: 1 point, in L-command max. 2 points (total max. 6 points)

Working main function and command parsing: 2 points (required to pass)

Appropriate programming style (distribution to functions, appropriate identation, appropriate naming, comments as needed): 2 points

Compiler gives warnings: max. -2 points

There are valgrind errors: max. -2 points

Max: 10 points.

Each function must give a clear output that either confirms succesful operation, or an error message as needed.

The program will be compiled with the following gcc command line options: -Wvla -Wall -g -std=c99

If compilation gives errors that prevent creating an executable, or the given command line format is not exactly followed, the assignment cannot be accepted, and you will get no points. However, you can skip some of the non-mandatory functions, if you do not have enough time, or cannot do them. A good strategy is to proceed on functionality at a time and test it before starting to implement the next function.

The program will be evaluated and tested on this TIM server, that is based on Ubuntu 16.04 system. However, implement and test your program in a real system, because that way testing and coding will be easier (and we will spare the server capacity). Only submit the ready program in the end. Evaluation will happen manually, so you will not get any automatic feedback with the submission.

Note: The test input in TIM system will operate as a sort of file that ends in end-of-file mark. Be prepared to handle end of file in your program, when you parse the user input. End of file may occur in any case also in normal use of the program.
